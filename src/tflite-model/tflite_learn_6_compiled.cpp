/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.05.2024 17:25:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 6640;
#else
constexpr int kTensorArenaSize = 5616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const ALIGN(16) float tensor_data1[8] = { -1.3786553144454956, 0.10790525376796722, -1.3193889856338501, -1.3140923976898193, -0.97724711894989014, -1.5523415803909302, -2.2163889408111572, -0.72216975688934326, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const ALIGN(16) float tensor_data2[16] = { -0.37634578347206116, -1.007541298866272, -0.1961478590965271, 0.20572191476821899, 0.14730817079544067, 0.92980891466140747, 0.012700721621513367, -0.55479484796524048, -0.80909895896911621, -0.34011703729629517, -1.1041709184646606, -0.18230804800987244, -0.27749344706535339, -1.1251424551010132, -0.023644896224141121, -0.33271849155426025, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ 0.3908810019493103,0.34642946720123291,-0.45125210285186768,-0.61633515357971191,-0.25757157802581787,0.48820367455482483,0.15083715319633484,-0.044442366808652878,0.012184961698949337,0.30097892880439758,-0.050649926066398621,0.084813162684440613,-0.16581718623638153, 0.59394031763076782,0.22166362404823303,-0.23400419950485229,-0.25812593102455139,0.17059148848056793,-0.11017698794603348,-0.12934385240077972,-0.31001773476600647,0.33822593092918396,-0.18168029189109802,-0.096527345478534698,0.19661197066307068,-0.13069623708724976, 0.23873557150363922,0.052689708769321442,-0.29980525374412537,0.47495275735855103,0.30705830454826355,-0.10982152819633484,-0.18623562157154083,0.078263305127620697,-0.22512787580490112,-0.031704321503639221,0.23488815128803253,-0.15450862050056458,0.15335835516452789, 
  /* [1][0][][] */ -2.0037102699279785,-0.0701279416680336,0.12145133316516876,0.65439653396606445,-0.22518196702003479,0.44338423013687134,0.084783196449279785,-0.054564185440540314,-0.10299102216959,0.073050089180469513,-0.1230936124920845,0.026807915419340134,0.1180250495672226, -0.72049003839492798,0.50612407922744751,-0.29789987206459045,-0.58494889736175537,-0.23789775371551514,-0.16736289858818054,0.12858246266841888,0.082569874823093414,0.30521476268768311,0.1487775593996048,0.32601305842399597,0.065988928079605103,0.028549976646900177, 0.96326756477355957,-0.21804703772068024,-0.044536154717206955,0.25355580449104309,0.23007330298423767,0.070152990520000458,-0.034651715308427811,0.076153881847858429,-0.43297263979911804,-0.14003373682498932,-0.04552343487739563,0.235862135887146,0.051223915070295334, 
  /* [2][0][][] */ 0.96700781583786011,0.14846239984035492,0.19672980904579163,-0.56410139799118042,-0.25885355472564697,0.095341578125953674,0.23454773426055908,0.043691046535968781,-0.14630228281021118,0.13641397655010223,0.16324387490749359,-0.025861727073788643,0.057052794843912125, -0.6006847620010376,-0.15621891617774963,-0.080522775650024414,0.15089049935340881,-0.22325526177883148,-0.13493868708610535,0.14023952186107635,-0.20036616921424866,-0.013064981438219547,-0.20268730819225311,0.090177036821842194,0.022671690210700035,-0.048462219536304474, -0.53385388851165771,0.98219454288482666,0.63476765155792236,-0.65466207265853882,-0.68781936168670654,-0.019067227840423584,0.2308707982301712,0.11400733888149261,-0.18756787478923798,-0.10195350646972656,-0.20964595675468445,0.13303288817405701,-0.0018077528802677989, 
  /* [3][0][][] */ -0.39425387978553772,-0.31318435072898865,0.34681963920593262,-0.37116649746894836,0.029857803136110306,-0.18991908431053162,0.098307698965072632,0.24947184324264526,0.29285731911659241,-0.089829340577125549,-0.23887321352958679,-0.11817549169063568,0.0073985629715025425, 0.69649708271026611,-0.50830018520355225,-0.1271100789308548,-0.2080996036529541,-0.091610804200172424,0.10885686427354813,-0.20891733467578888,0.1634305864572525,-0.18100869655609131,0.088390283286571503,0.031355615705251694,0.31648698449134827,0.088874638080596924, 0.75637441873550415,-0.52912348508834839,0.21266360580921173,0.16362749040126801,-0.10020039975643158,-0.24306125938892365,-0.068267568945884705,0.045582171529531479,0.2075960785150528,0.038519836962223053,0.27700933814048767,0.080540955066680908,0.074417762458324432, 
  /* [4][0][][] */ 0.64160424470901489,0.057384505867958069,0.057507943361997604,-0.32068824768066406,-0.0517406165599823,-0.19757267832756042,-0.13469117879867554,0.21334856748580933,0.040768790990114212,0.088851258158683777,-0.09914456307888031,0.23471948504447937,0.28579336404800415, -0.26291710138320923,0.45817500352859497,0.6234968900680542,0.22233577072620392,0.33708664774894714,0.27263820171356201,0.22105962038040161,-0.26428231596946716,-0.019647423177957535,-0.081322886049747467,-0.2590935230255127,-0.15400971472263336,-0.29773133993148804, -0.090819835662841797,-1.5463248491287231,-0.19259630143642426,-0.17673632502555847,0.0069094067439436913,0.17342056334018707,-0.028976574540138245,0.21512594819068909,-0.089027255773544312,-0.074444256722927094,0.39542219042778015,0.13850712776184082,0.21619234979152679, 
  /* [5][0][][] */ -0.30264586210250854,0.21689558029174805,0.36585783958435059,0.59645658731460571,-0.1726880818605423,-0.17770566046237946,-0.09612564742565155,-0.087242476642131805,-0.23146383464336395,-0.34604746103286743,-0.12027720361948013,0.046206645667552948,0.0049947504885494709, 0.72368758916854858,-0.25475344061851501,0.33535084128379822,0.3772875964641571,-0.063666351139545441,-0.33989438414573669,-0.057398214936256409,-0.092330582439899445,-0.18724352121353149,-0.18223239481449127,0.08745139092206955,0.047734834253787994,-0.17186303436756134, 0.3437964916229248,-0.1583118736743927,-0.50208926200866699,0.40667876601219177,0.24830257892608643,-0.26359331607818604,-0.13287912309169769,-0.044198665767908096,-0.083542875945568085,0.021880678832530975,-0.16388508677482605,0.11688715219497681,0.0091150086373090744, 
  /* [6][0][][] */ 0.074439786374568939,0.86419355869293213,-0.18082791566848755,0.08206447958946228,0.10527060925960541,-0.045668192207813263,-0.089222416281700134,0.11102095246315002,-0.30271181464195251,0.042160734534263611,0.09248698502779007,-0.32871577143669128,-0.21517378091812134, 0.17387016117572784,0.18617787957191467,0.35715770721435547,0.48531696200370789,0.16354142129421234,-0.23746074736118317,-0.22597645223140717,0.15409010648727417,0.12070970237255096,-0.41542559862136841,0.076672308146953583,-0.23182176053524017,0.014038183726370335, 0.54517883062362671,0.31701135635375977,-0.18569047749042511,0.37982448935508728,0.062964677810668945,-0.039462175220251083,-0.19049324095249176,0.017215797677636147,-0.0320596843957901,0.074850156903266907,-0.22329281270503998,-0.20338509976863861,0.040771808475255966, 
  /* [7][0][][] */ 2.086712121963501,0.27470487356185913,-0.047958388924598694,0.042077187448740005,0.043691195547580719,-0.2072463184595108,-0.13750937581062317,0.14703930914402008,0.22685256600379944,-0.0050973272882401943,0.082176320254802704,0.052245009690523148,0.042018171399831772, -0.55261522531509399,-0.36269497871398926,-0.36604097485542297,0.0033057169057428837,-0.037498265504837036,0.15886196494102478,0.038766387850046158,0.030720008537173271,-0.014766791835427284,0.02755659818649292,0.12370820343494415,-0.071576967835426331,0.082635313272476196, -1.6556664705276489,0.068713434040546417,0.43705639243125916,0.26902520656585693,0.19438472390174866,-0.25319942831993103,-0.080847106873989105,-0.25800701975822449,-0.29992488026618958,-0.16032430529594421,-0.23358456790447235,0.023521818220615387,0.031258106231689453, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.11122803390026093,-1.6996686458587646,0.04080180823802948,0.021708361804485321,-0.21336771547794342,0.1457035094499588,0.20727139711380005,-0.21289573609828949, -0.019389908760786057,-2.6420278549194336,0.15653155744075775,-0.056833788752555847,-1.314955472946167,0.12299427390098572,0.30260607600212097,0.011740844696760178, 0.23378947377204895,-1.3188676834106445,-0.12919363379478455,-0.032300621271133423,-0.74182349443435669,0.19373632967472076,0.33003827929496765,-0.0050620147958397865, 
  /* [1][0][][] */ -0.46680182218551636,0.1182224377989769,-0.2362714558839798,-0.052638716995716095,-0.0060553913936018944,-0.095641873776912689,-0.69980555772781372,0.55871808528900146, -0.34630584716796875,0.02674175426363945,-0.44737708568572998,0.013327999040484428,-0.045351471751928329,0.046966779977083206,-0.44438990950584412,0.089194104075431824, 0.44814729690551758,-0.089609242975711823,-0.13494330644607544,0.23038747906684875,0.11345473676919937,-0.23300078511238098,-0.52839082479476929,0.23746484518051147, 
  /* [2][0][][] */ -0.0020851981826126575,-0.066692665219306946,-0.19129066169261932,-0.16010008752346039,0.13979472219944,0.17422471940517426,-2.0816483497619629,0.046441216021776199, 0.10997625440359116,-0.094482749700546265,0.48676419258117676,-0.31868410110473633,-0.017273684963583946,-0.43032494187355042,-1.6339218616485596,0.11322470754384995, -0.38968777656555176,0.12369754910469055,-0.046694595366716385,-0.59248393774032593,0.17275182902812958,-0.20899191498756409,-0.77787590026855469,0.020109279081225395, 
  /* [3][0][][] */ 0.14114969968795776,-1.0502794981002808,-0.05011976882815361,-0.073538415133953094,0.038599215447902679,-0.81340807676315308,0.29194030165672302,-0.011251421645283699, -0.15132774412631989,-0.78432029485702515,-0.45291236042976379,0.24967166781425476,-0.14906617999076843,-0.98175245523452759,0.31257876753807068,-0.095373466610908508, -0.5013841986656189,-1.2301105260848999,-0.62148302793502808,0.14683204889297485,0.098208129405975342,-1.202459454536438,-1.1916660070419312,-0.97135984897613525, 
  /* [4][0][][] */ -0.97522670030593872,0.10093239694833755,-0.30577439069747925,-1.5335973501205444,-0.39502367377281189,0.11922018975019455,0.26737242937088013,-0.37164986133575439, -0.13870245218276978,0.033690676093101501,-0.29035019874572754,-0.76994502544403076,-1.4738196134567261,-0.1912674605846405,0.14577627182006836,-0.50729507207870483, 0.12597069144248962,-0.083209142088890076,-0.21311876177787781,-0.55070328712463379,-0.85247963666915894,0.40935394167900085,0.20616631209850311,-0.93507534265518188, 
  /* [5][0][][] */ -1.2964130640029907,-0.099595725536346436,-1.0955780744552612,0.17418462038040161,-0.1045808270573616,-1.4822940826416016,-1.2564842700958252,-0.31370565295219421, -1.7780853509902954,-0.021537486463785172,-0.68680500984191895,-0.11840137839317322,-0.056323353201150894,-1.7732096910476685,-2.0254642963409424,-0.17044885456562042, -1.5444302558898926,-0.01562986709177494,-1.0591113567352295,-0.029892534017562866,-0.096358485519886017,-0.83626240491867065,-1.7078926563262939,-0.53940075635910034, 
  /* [6][0][][] */ -0.41225588321685791,-0.16473349928855896,-0.87222021818161011,-0.26393142342567444,-0.34768226742744446,0.031992759555578232,0.66537123918533325,-0.57379281520843506, -0.032423343509435654,-0.67747050523757935,-0.39455291628837585,-0.0034434814006090164,-0.31007605791091919,-0.036911338567733765,-0.41058972477912903,-0.91919922828674316, 0.1033267006278038,-2.6229476928710938,0.17540690302848816,0.0049844388850033283,-0.37915942072868347,-0.26762151718139648,-0.62267285585403442,-0.76445335149765015, 
  /* [7][0][][] */ -0.77714645862579346,0.07151910662651062,-0.11289304494857788,-0.55841439962387085,-0.96534562110900879,-0.13869555294513702,0.0057607628405094147,-0.69974583387374878, -0.060798197984695435,-0.10820037871599197,-0.13124287128448486,-0.34640327095985413,-0.65474802255630493,0.7820248007774353,-0.17982941865921021,-0.72585386037826538, 0.058593098074197769,-0.22191177308559418,-0.22200207412242889,-0.15044832229614258,-0.51485580205917358,0.054579485207796097,0.038782164454460144,-0.62923634052276611, 
  /* [8][0][][] */ 0.38752499222755432,-1.1977767944335938,-0.10882413387298584,-0.49917834997177124,-0.35825461149215698,-0.16907355189323425,0.040506422519683838,0.30255988240242004, -0.17799830436706543,-0.30453455448150635,-0.12841679155826569,0.21357803046703339,0.292743980884552,-0.13890200853347778,0.044675581157207489,0.04657861590385437, -0.22230111062526703,-0.28857314586639404,-0.46250483393669128,0.37768179178237915,0.050937850028276443,0.20063641667366028,-0.078107759356498718,-0.31766387820243835, 
  /* [9][0][][] */ 0.41663292050361633,-0.31368952989578247,-0.12593916058540344,0.5048525333404541,-0.060475826263427734,0.14506630599498749,-0.04394175112247467,0.25125351548194885, -0.49417188763618469,-0.26893815398216248,-0.10134303569793701,-0.46019077301025391,-0.35837790369987488,0.057077117264270782,0.012391669675707817,0.14375552535057068, -0.34962311387062073,0.0067864097654819489,-0.17032656073570251,-0.39355221390724182,-0.40433385968208313,0.15572062134742737,0.039004139602184296,0.11228263378143311, 
  /* [10][0][][] */ 0.48952385783195496,-0.97446572780609131,-0.15329429507255554,0.011237539350986481,0.50259178876876831,-0.066270515322685242,-0.063277691602706909,0.0061102062463760376, -0.055027101188898087,-1.0706586837768555,-0.19891011714935303,-0.080870471894741058,-0.26138579845428467,-0.044486057013273239,-0.053808823227882385,0.042184043675661087, -0.0035046660341322422,-0.22907818853855133,-0.30322155356407166,-0.4883568286895752,-1.1072068214416504,0.29289421439170837,0.22275824844837189,0.1559460312128067, 
  /* [11][0][][] */ -0.92683231830596924,-0.057564150542020798,-0.52734577655792236,0.26539045572280884,0.11464625597000122,-0.031984321773052216,-0.58769172430038452,-1.2543231248855591, -1.5496394634246826,-0.45490553975105286,-0.22722002863883972,0.070432290434837341,0.19122329354286194,0.061076372861862183,-0.4170154333114624,-0.41933926939964294, -0.68600714206695557,-0.92542135715484619,-1.0842193365097046,0.14966985583305359,0.049315910786390305,0.22953504323959351,0.028714288026094437,-0.073222905397415161, 
  /* [12][0][][] */ 0.063720501959323883,-0.23782454431056976,-0.239839106798172,0.13503874838352203,0.062351495027542114,-0.02654288150370121,-0.066564358770847321,-0.047561202198266983, -0.026011619716882706,-0.50417572259902954,-0.21435661613941193,-0.11072911322116852,-0.028214666992425919,-0.039519011974334717,-0.41088837385177612,0.35150909423828125, -0.27443084120750427,-0.11631188541650772,-0.13838021457195282,-0.018852874636650085,0.43357616662979126,-0.042741686105728149,-0.49521619081497192,0.053847659379243851, 
  /* [13][0][][] */ -0.19425065815448761,0.067521609365940094,0.32783344388008118,-0.090973943471908569,-0.16467562317848206,-0.51504635810852051,-1.0362138748168945,-0.15354502201080322, -0.13060483336448669,0.22532123327255249,-0.047027096152305603,-0.050307117402553558,-0.015202600508928299,-0.20727153122425079,-0.58184200525283813,-0.69719874858856201, 0.58282113075256348,-0.073968678712844849,-0.1337863951921463,0.48641392588615417,0.054707493633031845,-0.095196127891540527,-0.064198493957519531,-0.048886574804782867, 
  /* [14][0][][] */ 0.33965274691581726,-0.16598522663116455,0.13808877766132355,0.15107439458370209,-0.47960558533668518,-0.28484755754470825,-0.3152841329574585,-1.079953670501709, -0.054571587592363358,-0.30719152092933655,0.22031430900096893,0.0965709388256073,-0.9541856050491333,-0.14068260788917542,0.0058815185911953449,-0.62165570259094238, 0.17637671530246735,-1.1329635381698608,0.10764299333095551,-0.29497808218002319,-0.59446299076080322,-0.18599596619606018,0.091168925166130066,-0.2230762243270874, 
  /* [15][0][][] */ 0.025090856477618217,-1.6261584758758545,-0.19029726088047028,-0.12136781215667725,-0.47030290961265564,-0.064851008355617523,0.14499129354953766,-0.36229217052459717, -0.050839483737945557,-1.0794415473937988,-0.24958397448062897,-0.27434110641479492,-0.24775312840938568,-0.26385152339935303,-0.19634947180747986,-0.17324969172477722, -0.048163745552301407,-0.68459653854370117,0.60692954063415527,-0.19062359631061554,-0.46722719073295593,-0.044765081256628036,-0.25342994928359985,-0.36914566159248352, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const ALIGN(16) float tensor_data9[4] = { -0.68344581127166748, 1.8252757787704468, 0.06933150440454483, -1.1856766939163208, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) float tensor_data11[4*208] = { 
  -0.072265408933162689, 0.13091164827346802, -0.18709106743335724, 0.015466776676476002, 0.29410898685455322, -0.028297720476984978, 0.43649002909660339, 0.11378622800111771, -0.10855364799499512, 0.033220097422599792, 0.30005073547363281, -0.34664785861968994, -0.12463591992855072, -0.35596141219139099, -0.90335464477539062, 0.27337720990180969, 0.22047421336174011, -0.047057408839464188, -0.23404967784881592, 0.27893534302711487, 0.47830513119697571, 0.1542937308549881, 0.54916638135910034, 0.24178610742092133, -0.27456888556480408, -0.0007849022513255477, -0.42712822556495667, -0.18069514632225037, -0.020899230614304543, -0.054566472768783569, 0.12183944880962372, 0.25812423229217529, 0.15891866385936737, 0.3891410231590271, -0.16837596893310547, 0.23396027088165283, 0.18985021114349365, 0.10116430371999741, 0.33371630311012268, 0.1236179918050766, -0.71247208118438721, -0.0034226840361952782, -0.099070839583873749, -0.4192538857460022, -0.046060193330049515, -0.22124341130256653, 0.17862693965435028, 0.3960760235786438, 0.33720216155052185, 0.11406148970127106, 0.26378127932548523, -0.12437007576227188, 0.29595747590065002, 0.081863760948181152, 0.31657817959785461, 0.20536024868488312, -1.0470632314682007, -0.15890017151832581, -0.13517040014266968, -0.59915322065353394, -0.19422738254070282, -0.21391227841377258, 0.1651025116443634, 0.24642705917358398, 0.22405602037906647, 0.37987276911735535, 0.056996166706085205, 0.2768491804599762, 0.19050835072994232, 0.036768235266208649, 0.59466761350631714, 0.094009272754192352, -0.85136139392852783, -0.26482707262039185, -0.058850344270467758, -0.92184305191040039, -0.6065630316734314, -0.21393539011478424, 0.20527082681655884, 0.21929110586643219, 0.097646377980709076, 0.31486129760742188, -0.067887358367443085, 0.13999414443969727, 0.13026562333106995, -0.12418897449970245, 0.4452843964099884, 0.34426906704902649, -0.61724048852920532, -0.14960783720016479, -0.23885774612426758, -0.83561629056930542, -0.52783316373825073, -0.5335959792137146, 0.27665615081787109, 0.15101504325866699, 0.1902216374874115, -0.23724497854709625, 0.10823690146207809, -0.2195284515619278, 0.21618129312992096, -0.022666575387120247, 0.27816978096961975, 0.16411697864532471, -0.3718724250793457, -0.40979784727096558, -0.37337267398834229, -1.367444634437561, -0.15535299479961395, -0.42473500967025757, 0.29217261075973511, 0.2832474410533905, 0.031430616974830627, 0.033004123717546463, 0.014401915483176708, -0.42593464255332947, 0.37801447510719299, 0.05947667732834816, 0.4552445113658905, 0.053448610007762909, -0.14848335087299347, -0.39672714471817017, -0.070743508636951447, -0.86981266736984253, -0.33376505970954895, -0.42718562483787537, 0.15436418354511261, 0.24221661686897278, 0.13375845551490784, 0.12772782146930695, 0.17363713681697845, -0.4200519323348999, 0.22902418673038483, 0.31342169642448425, 0.45651590824127197, 0.15902484953403473, -0.68192535638809204, -0.22912077605724335, -0.16459441184997559, -1.2059558629989624, -0.59281182289123535, -0.22805248200893402, 0.22937637567520142, 0.43839100003242493, 0.14442746341228485, -0.35120972990989685, 0.1575549989938736, -0.20996581017971039, 0.20055371522903442, -0.033671773970127106, 0.44668164849281311, 0.26272937655448914, -0.37642070651054382, -0.32719945907592773, -0.21409653127193451, -0.77337187528610229, -0.13651470839977264, -0.53851711750030518, 0.22443182766437531, 0.27940356731414795, -0.021774245426058769, -0.0032600527629256248, 0.19436235725879669, -0.32956096529960632, 0.050409652292728424, 0.18776862323284149, 0.45506298542022705, -0.010404996573925018, -0.94692695140838623, -0.059575088322162628, -0.050424862653017044, -0.93208247423171997, -0.5669940710067749, -0.038694854825735092, 0.29452860355377197, 0.2048400491476059, 0.18868784606456757, 0.077824980020523071, 0.074802465736865997, -0.054923579096794128, 0.18708306550979614, 0.3108370304107666, 0.52448230981826782, 0.17937208712100983, -0.44629961252212524, -0.059119358658790588, -0.3595750629901886, -0.72603482007980347, -0.035490281879901886, -0.17807170748710632, 0.0054380865767598152, 0.24210035800933838, 0.5718119740486145, -0.30335134267807007, 0.26773804426193237, -0.24203033745288849, -0.07282140851020813, 0.09068327397108078, 0.1651371568441391, -0.22855910658836365, 0.031244918704032898, -0.39873024821281433, -0.31921213865280151, -0.096465624868869781, 0.0423755943775177, 0.09607483446598053, -0.11997000873088837, 0.05965036153793335, 
  -0.14215965569019318, -0.0054404553957283497, 0.21998514235019684, 0.13710829615592957, -0.37485507130622864, -0.3897337019443512, -0.99549806118011475, -0.38477960228919983, 0.43992522358894348, 0.11896831542253494, 0.10097191482782364, 0.46208059787750244, 0.11686068773269653, 0.32375237345695496, 0.79883646965026855, -0.047154840081930161, -0.47394770383834839, 0.12829776108264923, 0.3022664487361908, -0.14537426829338074, -0.56650865077972412, -0.9517483115196228, -1.0892312526702881, -0.89788490533828735, 0.33365243673324585, 0.059194467961788177, 0.3602149486541748, -0.2305992990732193, 0.017952831462025642, 0.31360384821891785, -0.070807762444019318, -0.49644660949707031, -0.48244744539260864, -0.25611552596092224, 0.23000003397464752, -0.33745256066322327, -0.16017076373100281, -0.88494062423706055, -0.37146872282028198, -0.1184266060590744, 0.15480451285839081, 0.066490031778812408, -0.04547698050737381, 0.042111631482839584, 0.26477506756782532, 0.2731441855430603, -0.4050137996673584, -0.30222722887992859, -0.83744382858276367, 0.48069086670875549, 0.17512847483158112, -0.22839918732643127, -0.39107891917228699, -0.70308446884155273, -0.96739256381988525, -0.2468278706073761, 0.28576424717903137, 0.23290251195430756, 0.18762762844562531, -0.0052501349709928036, -0.026728276163339615, 0.31723541021347046, -0.61267751455307007, -0.40363124012947083, -0.65055906772613525, 0.17421147227287292, 0.46269717812538147, -0.28392794728279114, -0.48762661218643188, -0.5069153904914856, -1.0632444620132446, -0.31929725408554077, 0.0019891313277184963, 0.30614474415779114, -0.0010233493521809578, 0.032042056322097778, 0.22438310086727142, 0.18717499077320099, -0.38689056038856506, -0.68120336532592773, -1.196265697479248, 0.14796042442321777, 0.22949366271495819, -0.42693418264389038, -0.26193252205848694, -0.48661154508590698, -0.61287850141525269, -0.89272356033325195, 0.1662374883890152, 0.03920615091919899, 0.15368068218231201, -0.24908562004566193, 0.012095109559595585, 0.12421460449695587, -0.68271708488464355, -0.5944746732711792, -1.2316797971725464, 0.28802067041397095, 0.52560734748840332, -0.37023055553436279, -0.45091918110847473, -0.56844800710678101, -0.56928157806396484, -0.87579119205474854, 0.0025245002470910549, 0.50582659244537354, 0.048332996666431427, 0.05032917857170105, 0.050180960446596146, 0.31518837809562683, -0.47036802768707275, -0.40492779016494751, -0.28431841731071472, 0.17567943036556244, 0.27679181098937988, -0.14154879748821259, -0.36486279964447021, -0.86195993423461914, -0.61346811056137085, -0.2833804190158844, -0.075833879411220551, 0.15526603162288666, -0.092000417411327362, 0.086379863321781158, 0.13665041327476501, 0.25289344787597656, -0.46117129921913147, -0.41304522752761841, -0.74278181791305542, 0.34224033355712891, 0.23967604339122772, -0.32493388652801514, -0.42471659183502197, -0.38302981853485107, -0.63653701543807983, -0.32533812522888184, -0.027123652398586273, 0.14515160024166107, -0.1695978194475174, 0.015801321715116501, 0.25725522637367249, 0.23206683993339539, -0.60213011503219604, -0.29586991667747498, -0.65546292066574097, 0.11871415376663208, 0.11968369036912918, -0.31564551591873169, -0.57825809717178345, 0.0056514982134103775, -0.53896468877792358, -0.53042829036712646, 0.086314357817173004, 0.045110255479812622, 0.25445860624313354, -0.054577231407165527, -0.017993085086345673, 0.25277230143547058, -0.21082311868667603, -0.20306384563446045, -0.52870619297027588, 0.13557872176170349, 0.18659614026546478, -0.36183273792266846, -0.46310010552406311, -1.0843644142150879, -0.33564251661300659, -0.28458708524703979, 0.08479800820350647, 0.077924519777297974, 0.22066369652748108, -0.18780192732810974, 0.25446376204490662, 0.18266922235488892, 0.027791973203420639, -0.13337141275405884, -0.14515581727027893, 0.56326436996459961, -0.032603438943624496, -0.11276726424694061, -0.25364077091217041, -1.0020356178283691, 0.16923481225967407, -0.38137418031692505, 0.16826526820659637, 0.22429957985877991, 0.049925506114959717, 0.16333289444446564, 0.39311298727989197, 0.31683599948883057, -0.033487506210803986, 0.069531500339508057, -1.0017539262771606, -0.045675273984670639, 0.0071986471302807331, -0.16310493648052216, -0.64636826515197754, -0.58318090438842773, 0.20021693408489227, 0.37196677923202515, -0.033873163163661957, 0.073936805129051208, -0.012863932177424431, -0.1315547376871109, 0.1043604239821434, -0.16785086691379547, 0.43815875053405762, -0.1638682633638382, 
  0.16043896973133087, 0.023427162319421768, -0.024513678625226021, -0.4261142909526825, -0.34643024206161499, -0.14847488701343536, -0.17918667197227478, -0.41088199615478516, -0.0053554442711174488, -0.016926856711506844, -0.21915929019451141, 0.1716923862695694, 0.11205768585205078, 0.0092575540766119957, 0.13994917273521423, -0.19754558801651001, 0.17189322412014008, -0.037313498556613922, -0.17951487004756927, 0.37680476903915405, -0.31827625632286072, 0.17520107328891754, -0.25304484367370605, -0.36659213900566101, -0.096605062484741211, -0.18631929159164429, 0.17187531292438507, 0.24978910386562347, -0.096212446689605713, 0.17644573748111725, 0.19744177162647247, 0.017250144854187965, 0.11997959762811661, -0.38556796312332153, 0.030286539345979691, -0.079377874732017517, -0.26554468274116516, 0.035613663494586945, -0.27511140704154968, -0.3200913667678833, -0.12685739994049072, 0.047296952456235886, 0.17759865522384644, 0.36924642324447632, -0.10041429847478867, 0.25797128677368164, 0.31569123268127441, -0.035009700804948807, 0.17932663857936859, -0.13680914044380188, 0.048395100980997086, 0.052374247461557388, -0.29464709758758545, 0.099801488220691681, -0.15128551423549652, -0.40190696716308594, 0.08152405172586441, 0.20949743688106537, 0.42488354444503784, -0.045335512608289719, -0.19156403839588165, 0.32375308871269226, 0.29472097754478455, 0.19143675267696381, 0.12079039216041565, -0.13621276617050171, -0.075672045350074768, -0.1538117378950119, -0.29614809155464172, 0.13155186176300049, -0.13044248521327972, -0.3473300039768219, -0.15708068013191223, 0.24246092140674591, 0.37400311231613159, 0.17076447606086731, -0.06519249826669693, 0.17777626216411591, 0.16021965444087982, 0.10631579160690308, 0.14445136487483978, -0.22033803164958954, -0.28373906016349792, 0.055423691868782043, -0.2625400722026825, 0.042902994900941849, -0.13205106556415558, -0.36072677373886108, 0.06705300509929657, 0.35673967003822327, 0.3728015124797821, 0.086513213813304901, -0.15563376247882843, 0.20443309843540192, 0.18075455725193024, 0.051085490733385086, 0.20633359253406525, -0.14998681843280792, -0.20330727100372314, -0.045506257563829422, -0.32162937521934509, 0.056170959025621414, -0.14326786994934082, -0.24963414669036865, -0.029173640534281731, 0.21799492835998535, 0.26694822311401367, 0.059157479554414749, -0.065281406044960022, 0.16610731184482574, 0.33033180236816406, 0.21856687963008881, 0.17479737102985382, -0.03513886034488678, -0.12325077503919601, 0.061858188360929489, -0.36555424332618713, -0.055675242096185684, -0.13802379369735718, -0.19164882600307465, 0.15046150982379913, 0.338652104139328, 0.46169391274452209, -0.047291439026594162, -0.043824367225170135, 0.1446024626493454, 0.27178549766540527, 0.13233305513858795, 0.18369242548942566, -0.056295633316040039, -0.080979287624359131, 0.058751221746206284, -0.054575264453887939, -0.054589573293924332, -0.1019323468208313, -0.31474751234054565, 0.10887156426906586, 0.20439338684082031, 0.28599575161933899, 0.13077285885810852, 0.044896882027387619, 0.12982052564620972, 0.27154079079627991, 0.19596070051193237, 0.33494418859481812, 0.10998836159706116, -0.12843002378940582, -0.024006076157093048, -0.068458743393421173, 0.25849875807762146, -0.10996650904417038, -0.42834201455116272, -0.029498090967535973, 0.30222791433334351, 0.2645907998085022, 0.05830073356628418, -0.15938946604728699, 0.14742526412010193, 0.21397702395915985, 0.11276541650295258, 0.12294238805770874, -0.0042986338958144188, -0.062122676521539688, 0.041708815842866898, -0.012031106278300285, 0.1069725900888443, -0.15697638690471649, -0.10337164252996445, 0.00091844634152948856, 0.093983866274356842, 0.23552872240543365, 0.233464315533638, -0.025885608047246933, 0.063848473131656647, 0.29449355602264404, 0.050807014107704163, 0.15220643579959869, -0.20378223061561584, -0.12182252109050751, -0.38118109107017517, -0.034746751189231873, 0.11826810240745544, -0.34085920453071594, -0.40922525525093079, -0.26255127787590027, 0.19731935858726501, 0.21621538698673248, -0.08284924179315567, -0.089680247008800507, 0.065753333270549774, 0.043397054076194763, 0.087504707276821136, 0.023770632222294807, -0.087669827044010162, 0.17791847884654999, -0.40967440605163574, -0.016727719455957413, 0.312529057264328, -0.015617242082953453, 0.11741789430379868, 0.073336608707904816, -0.048329863697290421, -0.070760719478130341, -0.34468108415603638, -0.41326090693473816, 0.059337202459573746, -0.051247060298919678, -0.11561588197946548, 
  -0.022545881569385529, 0.063114427030086517, -0.070490971207618713, 0.048604428768157959, 0.28654834628105164, 0.037275552749633789, 0.26876619458198547, 0.47887453436851501, -0.32520061731338501, -0.4564288854598999, 0.083529122173786163, -0.55777853727340698, -0.3326144814491272, 0.0024463874287903309, -0.31712743639945984, 0.35734519362449646, 0.16543713212013245, -0.10862098634243011, -0.40706267952919006, -0.2777235209941864, 0.35701051354408264, 0.072843968868255615, 0.23269481956958771, 0.42020052671432495, 0.087318666279315948, -0.03426128625869751, -0.3311324417591095, 0.14243853092193604, -0.40722373127937317, -0.28561225533485413, -0.91086506843566895, -0.057739943265914917, 0.095115117728710175, 0.4536404013633728, -0.27406087517738342, 0.24483773112297058, 0.29070481657981873, 0.078801281750202179, 0.030727637931704521, 0.28711345791816711, 0.29098266363143921, -0.18865524232387543, -0.23593915998935699, -0.17366205155849457, -0.26557677984237671, -0.31933015584945679, -0.77141547203063965, -0.92740797996520996, 0.1573309600353241, -0.3872855007648468, -0.37690404057502747, 0.26224160194396973, 0.36523568630218506, 0.2092227041721344, -0.031362451612949371, 0.29891335964202881, 0.29784801602363586, -0.39742237329483032, -0.52438884973526001, 0.11811832338571548, 0.12802894413471222, -0.53141117095947266, -0.24929483234882355, -0.67306911945343018, 0.023039702326059341, -0.62752074003219604, -0.41139379143714905, 0.34588110446929932, 0.22899919748306274, 0.27416783571243286, 0.15600290894508362, 0.28171798586845398, 0.33816999197006226, -0.37357959151268005, -0.2669544517993927, 0.098499618470668793, 0.10565827041864395, -0.26923263072967529, -0.21954673528671265, -0.66694837808609009, 0.055391665548086166, -0.3794177770614624, 0.0029996947851032019, 0.56577527523040771, 0.35143539309501648, 0.39309412240982056, 0.077546380460262299, 0.44635695219039917, 0.26786571741104126, -0.039337273687124252, -0.28736209869384766, 0.27386927604675293, 0.16592292487621307, -0.24311776459217072, -0.32090416550636292, -0.89003640413284302, 0.0062972349114716053, 0.048143047839403152, -0.28438490629196167, 0.2750091552734375, 0.23102320730686188, 0.35276532173156738, -0.030027646571397781, 0.35165643692016602, 0.21972373127937317, -0.0068561816588044167, -0.18586279451847076, 0.18014687299728394, 0.06582767516374588, -0.50818508863449097, -0.57760584354400635, -0.78315842151641846, 0.15230737626552582, -0.32052576541900635, -0.54781109094619751, 0.29669705033302307, 0.34559682011604309, 0.26065388321876526, -0.029872950166463852, 0.30373609066009521, 0.15075729787349701, -0.34023961424827576, -0.27212238311767578, 0.37438100576400757, 0.30188032984733582, -0.33694127202033997, -0.45332732796669006, -1.0750709772109985, 0.1584322601556778, -0.38750883936882019, -0.40889129042625427, 0.30601826310157776, 0.1050463393330574, 0.017046311870217323, 0.16241389513015747, 0.23518723249435425, 0.36011430621147156, 0.014569593593478203, -0.012490632943809032, 0.24621342122554779, 0.046734470874071121, -0.38150718808174133, -0.49363383650779724, -0.9911046028137207, 0.29298102855682373, -0.24698662757873535, -0.10361656546592712, 0.66556286811828613, 0.26891422271728516, 0.31724947690963745, -0.045611400157213211, 0.44080588221549988, 0.24941618740558624, -0.18301168084144592, -0.22550351917743683, 0.17405954003334045, 0.16953851282596588, -0.49553969502449036, -0.32294896245002747, -0.75785189867019653, 0.025817714631557465, -0.24363206326961517, -0.084440208971500397, 0.34430983662605286, 0.22668950259685516, 0.5244830846786499, 0.064805254340171814, 0.35443732142448425, 0.19905534386634827, -0.084530249238014221, -0.22675742208957672, 0.092884987592697144, 0.34679761528968811, -0.79332005977630615, -0.52827751636505127, -0.79699575901031494, 0.17221394181251526, -0.33197170495986938, -0.15587997436523438, 0.36959847807884216, 0.060000665485858917, 0.30820435285568237, -0.17032408714294434, 0.38852521777153015, 0.34900972247123718, -0.33300143480300903, -0.095085248351097107, 0.30654343962669373, 0.20578238368034363, 0.14614541828632355, -0.62546581029891968, -1.1247438192367554, 0.19911666214466095, 0.4687439501285553, -0.55194741487503052, 0.3229072093963623, 0.38818088173866272, 0.11237483471632004, -0.2762945294380188, -0.20454144477844238, -0.023847481235861778, 0.10143584758043289, -0.1531868577003479, 0.37016049027442932, -0.023340770974755287, 0.087521180510520935, -0.51328152418136597, -0.27254036068916321, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 4,208 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension0, 2600, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1248, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 3328, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension13, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension15, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension21, 16, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 16, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
